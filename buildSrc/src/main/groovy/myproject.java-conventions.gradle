/*
 * Copyright (c) 2022-2025  Hendrik Horstmann
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.nio.file.Files
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java'
}

group = 'com.kurswahlApp'

def javaVersion = 18

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

kotlin {
    jvmToolchain(javaVersion)
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion))
    }
}

tasks.withType(KotlinCompilationTask).configureEach {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_18
        freeCompilerArgs.add("-Xmulti-dollar-interpolation")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom') // <4>

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.10' // <5>
    implementation 'org.jetbrains.kotlin:kotlin-reflect:2.1.10'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
}

test {
    useJUnitPlatform()
}

project.extensions.add(TypeOf.typeOf(String), "resDirName", "installerResources")

tasks.register('copyInstallerResources', Copy) {
    from("${rootProject.projectDir}/res/icons") {
        include 'app_icon.ico', 'app_icon.icns', 'app_icon.png'
        rename 'app_icon(.*)', "${rootProject.name}\$1"
    }
    from layout.projectDirectory.dir("res"), "${rootProject.projectDir}/app/res"
    into layout.buildDirectory.dir((String) project.resDirName)
}

tasks.register('downloadSchoolsData') {
    def f = file("$buildDir/resources/main/schools-data/per-school-settings.json")

    doFirst {
        Files.createDirectories(f.parentFile.toPath())
        new URL('https://raw.githubusercontent.com/heinrich26/Kurs-Check/data/per-school-settings.json')
                .withInputStream { i -> f.withOutputStream { it << i }}
    }
}